misty module tokenize
# 2025-01-14

# Tokenize takes a text and converts it into an array of tokens.
# The input is a source text. The output is an array of token records.

# A token contains
#      kind
#      text
#      number
#      at
#      from_column
#      from_row
#      to_column
#      to_row
#      quote {'"' or '<<'} (only when kind: "text")
#      error (only when kind: "text")

# A kind includes
#      name
#      number
#      text
#      space
#      newline
#      comment
# Punctuators are their own kinds.

# Tokenize does not directly report errors. It always completes the file,
# no matter how messed up it may be. If there is an error in a name or number,
# it makes a legal name and treats the leftover parts as separate tokens. If
# there is an error in a text, it adds an 'error' field to the token. Currently,
# the errors are
#      Unclosed text literal
#      Missing '{'
#      Missing '}'
#      Missing codepoint
#      Bad codepoint
#      Bad escapement
#      Lower case hex

# Tokenize can recognize many punctuators that are not legal Misty tokens.
# In particular, some special characters can be repeated and followed by
# equal signs. Misty does a little of this. The C family does this a lot.

# Characters outside of Misty's character set that are not enclosed in text
# literals are encoded as single character punctuators.

def error_message: stone({
    "Bad codepoint ": "Bad codepoint "
    "Bad escapement ": "Bad escapement "
    "Lower case hex ": "Lower case hex "
    "Missing '{'": "Missing '{'"
    "Missing '}'": "Missing '}'"
    "Missing codepoint": "Missing codepoint"
    "Unclosed text literal": "Unclosed text literal"
})

def escape: stone({
    b: <<\>>
    g: ">"
    l: "<"
    n: "\n"
    q: <<">>
    r: "\r"
    t: "\t"
})

def hex: stone({
    "0": true
    "1": true
    "2": true
    "3": true
    "4": true
    "5": true
    "6": true
    "7": true
    "8": true
    "9": true
    "A": true
    "B": true
    "C": true
    "D": true
    "E": true
    "F": true
})

var at: 0
var column_nr: 0
var row_nr: 0
var source: ""
var token: null
var tokenators: null
var tokens: null

def error(reason, evidence | "") {
    assign token.error: error_message[reason] + evidence
}

def peek(ahead | 0) {
    return source[at + ahead]
}

def advance() {
    assign at: at + 1
    assign column_nr: column_nr + 1
}

def snip(trim_front | 0, trim_back | 0) (
    source.slice(token.at + trim_front, at - trim_back)
)

def seal() {
    assign token.text: snip()
    assign token.kind: token.text
}

def repeatable(character) {
    do
        if peek() <> character
            break
        fi
        call advance()
    od
}

def cish() {
    call repeatable(peek(-1))
    call repeatable("=")
    call seal()
}

def newline() {
    assign token.kind: "newline"
    assign token.text: "\n"
    assign column_nr: 0
    assign row_nr: row_nr + 1
}

def carriage_return() {
    assign token.kind: "newline"
    if peek() = "\n"
        call advance()
        assign token.text: "\r\n"
    else
        assign token.text: "\r"
    fi
    assign column_nr: 0
    assign row_nr: row_nr + 1
}

def ender(character) {
    return character = "\n" \/ character = "\r" \/ character = null
}

def comment() {
    var character: null
    do
        assign character: peek()
        if ender()
            break
        fi
        call advance()
    od
    assign token.kind: "comment"
    assign token.text: snip()
}

def space() {
    call repeatable(" ")
    assign token.kind: "space"
    assign token.text: snip()
}

def digit() {
    var e_seen: false
    var period_seen: false
    do
        if tokenators[peek()] = digit
            call advance()
        else
            if peek() = "."
                if period_seen \/ e_seen
                    break
                else
                    assign period_seen: true
                    if tokenators[peek(1)] <> digit
                        break
                    fi
                    call advance()
                fi
            else if peek() = "e"
                if e_seen
                    break
                else
                    assign e_seen: true
                    assign period_seen: true
                    if peek(1) = "-"
                        if tokenators[peek(2)] <> digit
                            break
                        fi
                        call advance()
                    else
                        if tokenators[peek(1)] <> digit
                            break
                        fi
                    fi
                    call advance()
                fi
            else if peek() = "_"
                if tokenators[peek(1)] <> digit
                    break
                fi
                call advance()
            else
                break
            fi
        fi
    od
    assign token.kind: "number"
    assign token.text: snip()
    assign token.number: number(token.text)
}

def minus() {
    if tokenators[peek()] = digit
        call digit()
    else
        call repeatable("-")
        call repeatable("=")
        call seal()
    fi
}

def slash() {
    if peek() = <<\>>
        call advance()
    else
        call repeatable("/")
        call repeatable("=")
    fi
    call seal()
}

def equal() {
    call repeatable("=")
    call repeatable(">")
    call seal()
}

def left_bracket() {
    if peek() = "]"
        call advance()
    fi
    call seal()
}

def backslash() {
    if peek() = "/"
        call advance()
    fi
    call seal()
}

def chevron() {
    var nesting: 0
    do
        if peek() = ">" /\ peek(1) = ">"
            call advance()
            call advance()
            if nesting = 0
                break
            fi
            assign nesting: nesting - 1
        else if peek() = "<" /\ peek(1) = "<"
            call advance()
            call advance()
            assign nesting: nesting + 1
        else if peek() = "\n"
            call advance()
            call newline()
        else if peek() = "\r"
            call advance()
            call carriage_return()
        else if peek() = null
            call error("Unclosed text literal")
            assign token.kind: "text"
            assign token.text: snip()
            assign token.quote: "<<"
            return
        else
            call advance()
        fi
    od
    assign token.kind: "text"
    assign token.text: snip(2, 2)
    assign token.quote: "<<"
}

def less() {
    if peek() = "<"
        if peek(1) = <<">>
            call advance()
            call advance()
            return chevron()
        else
            do
                if peek() = "<"
                    if peek(1) = "<" /\ peek(2) = <<">>
                        break
                    fi
                    call advance()
                else
                    call repeatable("=")
                    break
                fi
            od
        fi
    else
        if peek() = ">"
            call advance()
        else
            call repeatable("=")
        fi
    fi
    call seal()
}

var alphameric: null

def middle() {
    if alphameric(peek())
        call advance()
        return middle()
    fi
    if peek() = "_"
        if alphameric(peek(1))
            call advance()
            call advance()
            return middle()
        fi
    fi
}

def letter() {
    call middle()
    if peek() = "?"
        call advance()
    fi
    assign token.kind: "name"
    assign token.text: snip()
}

assign alphameric: function (character) {
    def tokenator: tokenators[character]
    return tokenator = letter \/ tokenator = digit
}

def quote() {
    var value: ""
    var escapee: ""
    var codepoint: 0
    do
        if peek() = <<">>
            call advance()
            break
        fi
        if ender(peek())
            call error("Unclosed text literal")
            break
        fi
        if peek() = <<\>>
            call advance()
            assign escapee: escape[peek()]
            if escapee <> null
                call advance()
                assign value: value & escapee
            else if peek() = "u"
                call advance()
                if peek() <> "{"
                    call error("Missing ", "'{'")
                else if ender(peek())
                    call error("Unclosed text literal")
                else
                    call advance()
                    assign escapee: ""
                    do
                        if hex[peek()] = false
                            call error("Lower case hex ", peek())
                        else if hex[peek()] <> true
                            break
                        fi
                        assign escapee: escapee & peek()
                        call advance()
                    od
                    if peek() <> "}"
                        call error("Missing ", "'}'")
                    else
                        call advance()
                    fi
                    if escapee = ""
                        call error("Missing codepoint")
                    else
                        assign codepoint: number(escapee, 16)
                        if fit?(codepoint) /\ codepoint < 4294967296
                            assign value: value & character(codepoint)
                        else
                            call error("Bad codepoint ", escapee)
                        fi
                    fi
                fi
            else if ender(peek())
                call error("Unclosed text literal")
            else
                call error("Bad escapement ", peek())
                assign value: value & peek()
                call advance()
            fi
        else
            assign value: value & peek()
            call advance()
        fi
    od
    assign token.kind: "text"
    assign token.text: value
    assign token.quote: <<">>
}

assign tokenators: {
    "\n": newline
    "\r": carriage_return
    " ": space
    "#": comment
    "/": slash
    <<\>>: backslash
    "|": cish
    "&": cish
    <<">>: quote
    "-": minus
    "+": cish
    "*": cish
    "=": equal
    ":": cish
    "[": left_bracket
    "<": less
    ">": cish
    "!": cish
    "^": cish
    "%": cish
    "0": digit
    "1": digit
    "2": digit
    "3": digit
    "4": digit
    "5": digit
    "6": digit
    "7": digit
    "8": digit
    "9": digit
    "A": letter
    "B": letter
    "C": letter
    "D": letter
    "E": letter
    "F": letter
    "G": letter
    "H": letter
    "I": letter
    "J": letter
    "K": letter
    "L": letter
    "M": letter
    "N": letter
    "O": letter
    "P": letter
    "Q": letter
    "R": letter
    "S": letter
    "T": letter
    "U": letter
    "V": letter
    "W": letter
    "X": letter
    "Y": letter
    "Z": letter
    "a": letter
    "b": letter
    "c": letter
    "d": letter
    "e": letter
    "f": letter
    "g": letter
    "h": letter
    "i": letter
    "j": letter
    "k": letter
    "l": letter
    "m": letter
    "n": letter
    "o": letter
    "p": letter
    "q": letter
    "r": letter
    "s": letter
    "t": letter
    "u": letter
    "v": letter
    "w": letter
    "x": letter
    "y": letter
    "z": letter
}

return function tokenize(source_text) {
    var character: ""
    var tokenator: ""
    assign source: source_text
    assign at: 0
    assign row_nr: 0
    assign column_nr: 0
    assign tokens: []
    do
        assign token: {
            at
            from_column: column_nr
            from_row: row_nr
        }
        if peek() = null
            return tokens
        fi
        assign character: peek()
        assign tokenator: tokenators[character]
        call advance()
        if function?(tokenator)
            call tokenator()
        else
            call seal(character)
        fi
        assign token.to_column: column_nr
        assign token.to_row: row_nr
        assign tokens[]: token
    od
    return tokens
}
end tokenize
